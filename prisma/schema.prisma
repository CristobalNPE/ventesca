// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Category {
  id          String    @id @default(cuid())
  code        Int
  colorCode   String
  description String
  products    Product[]
  business    Business  @relation(fields: [businessId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  businessId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isEssential Boolean   @default(false) //Data marked as essential should not be possible to be edited or removed
}

model Supplier {
  id          String    @id @default(cuid())
  rut         String
  name        String
  address     String
  city        String
  fantasyName String
  phone       String
  email       String
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  business    Business? @relation(fields: [businessId], references: [id])
  businessId  String?
  isEssential Boolean   @default(false) //Data marked as essential should not be possible to be edited or removed
}

model Product {
  id               String            @id @default(cuid())
  isActive         Boolean           @default(false)
  isDeleted        Boolean           @default(false)
  code             String
  name             String
  sellingPrice     Int
  price            Int
  stock            Int
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  deletedAt        DateTime?
  category         Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId       String
  supplier         Supplier          @relation(fields: [supplierId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  supplierId       String
  productOrders    ProductOrder[]
  discounts        Discount[]
  business         Business          @relation(fields: [businessId], references: [id])
  businessId       String
  productAnalytics ProductAnalytics?

  // This allows you to have the same product code for an active and a deleted product,
  // but prevents having duplicate active products with the same code.
  @@unique([code, isDeleted])
  @@index([isDeleted])
  @@index([code])
  @@index([name])
  @@index([createdAt])
}

model ProductAnalytics {
  id           String              @id @default(cuid())
  product      Product             @relation(fields: [productId], references: [id])
  productId    String              @unique
  totalProfit  Int                 @default(0)
  totalSales   Int                 @default(0)
  totalReturns Int                 @default(0)
  priceHistory PriceModification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdAt])
}

//! Price history should not include when product was just created with 0 price.
model PriceModification {
  id                      String                 @id @default(cuid())
  status                  String //pending/applied
  oldPrice                Int
  newPrice                Int
  productAnalytics        ProductAnalytics       @relation(fields: [productAnalyticsId], references: [id])
  productAnalyticsId      String
  bulkPriceModification   BulkPriceModification? @relation(fields: [bulkPriceModificationId], references: [id], onDelete: Cascade)
  bulkPriceModificationId String?
  createdAt               DateTime               @default(now())

  @@index([productAnalyticsId])
  @@index([bulkPriceModificationId])
  @@index([createdAt])
}

model BulkPriceModification {
  id                    String              @id @default(cuid())
  status                String //executed/reverted
  createdAt             DateTime            @default(now())
  executedAt            DateTime?
  revertedAt            DateTime?
  strategy              String //percentage/fixed_amount
  scope                 String //inventory/category
  direction             String //increase/decrease
  adjustmentValue       Int
  affectedProductsCount Int
  executedBy            String
  revertedBy            String?
  reason                String?
  previousPriceSnapshot String?
  business              Business            @relation(fields: [businessId], references: [id])
  businessId            String
  priceModifications    PriceModification[]

  @@index([createdAt])
  @@index([executedAt])
}

model Order {
  id             String         @id @default(cuid())
  status         String // e.g. pending, canceled, completed
  paymentMethod  String // e.g. cash, credit, debit
  subtotal       Int
  total          Int
  totalDiscount  Int
  directDiscount Int
  discounts      Discount[]
  isDiscarded    Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  completedAt    DateTime       @default(now())
  productOrders  ProductOrder[]
  seller         User           @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sellerId       String
  business       Business       @relation(fields: [businessId], references: [id])
  businessId     String
}

model ProductOrder {
  id             String   @id @default(cuid())
  quantity       Int
  type           String // e.g. sale, loan, return
  totalPrice     Int
  totalDiscount  Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  productDetails Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId      String
  order          Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId        String

  @@unique([productId, orderId])
}

model Discount {
  id                String    @id @default(cuid())
  name              String
  description       String
  type              String // e.g. FIXED AMOUNT, PERCENTAGE
  scope             String // e.g. SingleItem, Category
  applicationMethod String // e.g. to-total, by-item
  minimumQuantity   Int
  value             Int
  validFrom         DateTime
  validUntil        DateTime
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  business          Business  @relation(fields: [businessId], references: [id])
  businessId        String
  products          Product[]
  orders            Order[]
}

model Business {
  id                     String                  @id @default(cuid())
  name                   String
  address                String?
  phone                  String?
  email                  String?
  thanksMessage          String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  products               Product[]
  orders                 Order[]
  categories             Category[]
  suppliers              Supplier[]
  discounts              Discount[]
  bulkPriceModifications BulkPriceModification[]
  users                  User[]
  image                  BusinessLogoImage?
}

model User {
  id        String  @id @default(cuid())
  email     String  @unique
  username  String  @unique
  name      String?
  isActive  Boolean @default(true)
  isDeleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image       UserImage?
  password    Password?
  roles       Role[]
  sessions    Session[]
  connections Connection[]
  orders      Order[]
  business    Business     @relation(fields: [businessId], references: [id])
  businessId  String
}

model UserImage {
  id          String   @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String   @unique
}

model BusinessLogoImage {
  id          String   @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  businessId  String   @unique
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  browser String
  version String
  os      String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}
