// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Family {
  id          String @id @default(cuid())
  code        Int    @unique
  description String
  items       Item[]
}

model Provider {
  id          String   @id @default(cuid())
  rut         String   @unique
  name        String
  address     String
  city        String
  fantasyName String
  phone       String
  fax         String
  items       Item[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Item {
  id           String            @id @default(cuid())
  code         Int               @unique
  name         String?
  sellingPrice Float?
  price        Float?
  stock        Int
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  family       Family?           @relation(fields: [familyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  familyId     String
  provider     Provider?         @relation(fields: [providerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  providerId   String?
  transactions ItemTransaction[]
}

model Transaction {
  id          String            @id @default(cuid())
  status      String // e.g. pending, cancled, completed
  subtotal    Int
  total       Int
  discount    Int
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  completedAt DateTime?
  items       ItemTransaction[]
  seller      User?             @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sellerId    String?
}

model ItemTransaction {
  id            String       @id @default(cuid())
  quantity      Int
  type          String // e.g. sale, loan, return
  totalPrice    Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  item          Item?        @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemId        String?
  transaction   Transaction? @relation(fields: [transactionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  transactionId String?
}

model User {
  id           String        @id @default(cuid())
  email        String?       @unique
  username     String        @unique
  name         String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  image        UserImage?
  password     Password?
  roles        Role[]
  sessions     Session[]
  connections  Connection[]
  transactions Transaction[]
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}
