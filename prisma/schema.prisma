// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Category {
  id          String   @id @default(cuid())
  code        Int
  description String
  items       Item[]
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  businessId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Supplier {
  id          String    @id @default(cuid())
  rut         String
  name        String
  address     String
  city        String
  fantasyName String
  phone       String
  email       String
  items       Item[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  business    Business? @relation(fields: [businessId], references: [id])
  businessId  String?
}

model Item {
  id            String            @id @default(cuid())
  isActive      Boolean
  code          Int
  name          String
  sellingPrice  Float
  price         Float
  stock         Int
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  category      Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId    String
  supplier      Supplier          @relation(fields: [supplierId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  supplierId    String
  transactions  ItemTransaction[]
  discounts     Discount[]
  business      Business          @relation(fields: [businessId], references: [id])
  businessId    String
  itemAnalytics ItemAnalytics?
}

model ItemAnalytics {
  id          String @id @default(cuid())
  item        Item   @relation(fields: [itemId], references: [id])
  itemId      String @unique
  totalProfit Float  @default(0)
  totalSales  Int    @default(0)
  // averagePrice   Float
  // leastSoldDate  DateTime?
  // mostProfitData DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id               String            @id @default(cuid())
  status           String // e.g. pending, canceled, completed
  paymentMethod    String // e.g. cash, credit, debit
  subtotal         Int
  total            Int
  totalDiscount    Int
  directDiscount   Int
  discounts        Discount[]
  isDiscarded      Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  completedAt      DateTime          @default(now())
  itemTransactions ItemTransaction[]
  seller           User              @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sellerId         String
  business         Business          @relation(fields: [businessId], references: [id])
  businessId       String
}

model ItemTransaction {
  id            String      @id @default(cuid())
  quantity      Int
  type          String // e.g. sale, loan, return
  totalPrice    Int
  totalDiscount Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  item          Item        @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemId        String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  transactionId String

  @@unique([itemId, transactionId])
}

model Discount {
  id                String        @id @default(cuid())
  name              String
  description       String
  type              String // e.g. FIXED AMOUNT, PERCENTAGE
  scope             String // e.g. SingleItem, Category
  applicationMethod String // e.g. to-total, by-item
  minimumQuantity   Int
  value             Int
  validFrom         DateTime
  validUntil        DateTime
  isActive          Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  business          Business      @relation(fields: [businessId], references: [id])
  businessId        String
  items             Item[]
  transactions      Transaction[]
}

model Business {
  id           String        @id @default(cuid())
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  items        Item[]
  transactions Transaction[]
  categories   Category[]
  suppliers    Supplier[]
  discounts    Discount[]
  users        User[]
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image        UserImage?
  password     Password?
  roles        Role[]
  sessions     Session[]
  connections  Connection[]
  transactions Transaction[]
  business     Business      @relation(fields: [businessId], references: [id])
  businessId   String
}

model UserImage {
  id          String   @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String   @unique
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  browser String
  version String
  os      String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}
